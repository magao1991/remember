<!-- h1. 中文 -->

<!-- "for English please click":#english -->

h2. remember.js

它是一个智能的组件，它的意思是“记得” 
它能记录用户对下拉菜单 @<select>@ 、单选按钮 @<input type="radio">@ 、选择框 @<input type="checkbox">@ 的选择及输入框 @<input>，type不为"radio"和"checkbox"@ 、输入区域 @<textarea>@ 的值，并在用户下次载入页面时，按照上次记录的值还原用户的选择及输入的值。

支持的浏览器如下，也就是说，目前还在广泛使用的浏览器中，只有IE6\IE7\IE8不支持：

* IE 9+
* Firefox 3+
* Safari 3.2+
* chrome 5+
* iOS 3.2+
* Android 2.1+

h2. 当前用户
* "百度地图":http://map.baidu.com/
* +You

h2. 如何使用?

h3. Basic

在你HTML代码的尾部引入remember.js：

<pre><script src="remember.js"></script></pre>

<!-- 你也可以使用我们的CDN服务器： -->

<!-- <pre><script src="??????????"></script></pre> -->

接着你为所有要记录的“下拉菜单 @<select>@ 、单选按钮 @<input type="radio">@ 、选择框 @<input type="checkbox">@ 及输入框 @<input>，type不为"radio"和"checkbox"@ 、输入区域 @<textarea>@ ”（我们称它为“可交互元素”，下同）均赋予一个id，如：

<pre><input id="checkbox_0" type="checkbox"/></pre>

然后加入下面一句代码，即可记录页面中所有区域内上述元素的选择或输入值：

<pre><script>
    remember()
</script></pre>

h3. 高级

h4. 指定记录的区域

remember(wrapperDOM)方法的第一个参数 @wrapperDOM@ 可以是某个dom元素，或某个dom元素id的字符串。
可以通过传递区域最完成dom元素或它的id来指定记录的区域：

<pre><script>
remember('wrapper')
// 或 remember(document.getElementById('wrapper'))
</script></pre>

可以指定页面中的多个区域，通过调用多次 @remember@ 方法，传递不同的 @wrapperDOM@ 参数来实现
但不能是：指定的`wrapperDOM`已被占用，或与另一个已被使用的`wrapperDOM`有包含或被包含的关系

<pre><script>
remember('area1')
remember('area2')
</script></pre>

h4. 不记录页面中的某些“可交互元素”

最简单的方法就是不为这些“可交互元素”赋予id，或者将它们的id通过下面的方式加入到忽略id数组。
对于单选按钮 @<input type="radio">@ ，你需要将它们每一个 @<input>@ 的id都添加进去

<pre><script>
remember(document,{
    ignoreIds:['select_0','radio_0','radio_1']
})
</script></pre>

h4. 自行控制下一次页面载入时“可交互元素”的还原行为

默认情况下，在下一次载入页面时，该组件会将所有符合要求且未被忽略的“可交互元素”赋予上一次的值，你也可以获取这个值来进行其它操作。通过配置一个函数的形式来操作它。如果该配置函数返回true，则继续执行组件原本的设定值操作；如果函数返回值为false，则不继续执行组件原本的设定值操作

<pre><script>
remember(document,{
    handleSetValueFromCacheFuncs:{
        'input_0':function(value,wrapperDOM){
            // this 指向当前dom，本例中即id为input_0的元素
            // value 当前存储值，如果this是一个<textarea>，请用remember.configs.textareaLineFeedHolder替换回换行符，如 value.replace(remember.configs.textareaLineFeedHolder,'\n')
            //  如果this是一个<input type="radio">，并且它没有指定value值，那么可以通过remember.configs.noValueRadioIndexPrefix获取在所有name相同的<input type="radio">中它的位置，如 value.replace(remember.configs.noValueRadioIndexPrefix,'')
            //  如果this是一个<input type="checkbox">，并且它没有指定value值，如果他被选中了（this.checked），那么value为1，否则为0
            // wrapperDOM是初始化时，传入的wrapperDOM参数对应的dom
            return true // 继续执行组件原本的设定值操作
            // return false // 不继续执行组件原本的设定值操作
        },
    }
})
</script></pre>

h4. 修改默认配置

可以通过修改remember.configs对象上的各个字段来打到修改默认配置的效果。
请注意，需要先修改默认配置，再初始化remember对象实例。

# @noValueRadioIndexPrefix@ 默认值 @'__R_NVRIP__'@ // 有一组 @name@ 值相同的 @<input type="radio">@ ，但当前被选中的radio可能没有 @value@ 值，我们就要一个模拟的值——用它在这一组radio中的位置来代替它的值来存储。`noValueRadioIndexPrefix`就是这个假值的前缀。举个例子：如果第三个radio被选中了，我们将noValueRadioIndexPrefix+'3'，默认配置下即`__R_NVRIP__2`当做模拟值来存储
# @oldValueAttributeName@ 默认值 @'data-roldvalue'@ // @<input>，type不为"radio"和"checkbox"@ 和 @textarea@ 必须将旧值存储起来，以便于检查值是否发生了变化。我们将旧制存储到这个dom属性中
# @textareaLineFeedHolder@ 默认值 @'__R_TLFH_ramdom_769768842_ramdom_'@ // textarea的换行符会在与其他字符串连接时丢弃。为了避免这种情况，我们在这之前用这个属性的值将换行符替换到。在还原时再替换回来
# @localStorageKeyPrefix@ 默认值 @'__R_LSK__'@ // 一个特殊的key，用于localStorage的key的前缀。为了避免冲突，它的值应该有一些复杂度。
# @ignoreSearchStringInUrl@ 默认值 @false@ // 我们将不同“网址”的值存储在不同的key下，这里所说的“网址”不包含location.hash部分。但是是否包含location.search部分是可选的。当这个值为false时，将包含location.search部分（ `http://www.example.com/?a=1` 与 `http://www.example.com/?a=2` 视为不同“网址”）；否则不包含location.search部分（ `http://www.example.com/?a=1` 与 `http://www.example.com/?a=2` 视为同一个“网址”）

h3. 详细接口

remember对象实例
每当你调用remember()时，如果没有出错，它都会返回一个remember的对象实例，这个对象实例能让你做进一步精细的控制。

h4. wrapperDom属性

指向当前remember对象实例的wrapperDom，即使你初始化时的wrapperDom参数传递的是dom的id，也会指向实际的dom。当初始化时传递的wrapperDom参数不合法，则指向document

h4. handleSetValueFromCacheFuncs属性

指向当前remember对象实例初始化时配置项里面的handleSetValueFromCacheFuncs对象，如果不合法，则为 @{}@

h4. ignoreIds属性

指向当前remember对象实例初始化时配置项里面的ignoreIds数组，如果不合法，则为 @[]@

h4. setValue方法

<pre><script>
var myRemember = remember(wrapperDom,options)
myRemember.setValue()
</script></pre>

这个方法会在调用remember()，生成remember对象实例时自动调用一次，它的作用是将缓存储的上一次“可交互元素”的值设置到对应“可交互元素”上。

h4. getKvObj方法

<pre><script>
var myRemember = remember(wrapperDom,options)
myRemember.getKvObj()
</script></pre>

这个方法返回当前wrapperDom内所有满足监听条件的（有id，不在忽略id列表内）“可交互元素”的键->值为id->value的对象

h4. stop方法

<pre><script>
var myRemember = remember(wrapperDom,options)
myRemember.stop()
</script></pre>

这个方法将会注销掉掉remember对象，使他不再起任何作用。比如注销掉对对应“可交互元素”的监听。

h2. License

所有代码遵循 "MIT License":http://www.opensource.org/licenses/mit-license.php 。也就是说你可以自由地做任何你想做的事情。只是不能在代码中移除我的名字。